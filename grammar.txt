ExpressionParser
logic               ->  condition (("or" | "and") condition)*
condition           ->  inCondition | comparison
inCondition         ->  IDENTIFIER ("not")? "in" "(" (primary ("," primary)*) ")"
comparison          ->  binaryArithmetic (comparisonSymbol binaryArithmetic)?
comparisonSymbol	->  ">" | "<" | ">=" | "<=" | "!=" | "=" | "like" | "contains" | isNot
isNot               ->  "is" ("not")?
binaryArithmetic    ->  unaryArithmetic (("+" | "-" | "*" | "/") unaryArithmetic)*
unaryArithmetic     ->  ("!"|"-") unaryArithmetic | primary
primary             ->  #{xxx} | ? | "true" | "false" | "null" | INTEGER | DECIMAL | STRING | IDENTIFIER | grouping | function
grouping            ->  "(" logic ")"

function            ->  functionName "(" functionParameter? ("," functionParameter)* ")"
functionParameter   ->  condition | timeInterval | timeUnit | function
timeInterval        ->  "interval" INTEGER IDENTIFIER
timeUnit            ->  IDENTIFIER "from" primary

whereSeg            ->  "where" logic
assignmentList      ->  (IDENTIFIER "=" binaryArithmetic) ("," IDENTIFIER "=" binaryArithmetic)*
columnList			->  IDENTIFIER ("," IDENTIFIER)*
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SelectParser
select              ->  singleSelect (("union" | "minus" | "intersect" | "except") ("all")? singleSelect)*

singleSelect        ->  columnSeg tableSeg (whereSeg)? (groupBySeg)? (orderBySeg)? (limitSeg)? (lockSeg)?
columnSeg           ->  "select" ("distinct")? columnRep ("," columnRep)*
columnRep           ->  (* | caseWhen | binaryArithmetic) ("as" IDENTIFIER)?
caseWhen            ->  "case" binaryArithmetic ("when" binaryArithmetic "then" binaryArithmetic)+ "else" binaryArithmetic "end"
tableSeg            ->  "from" tableRep (("left" | "right" | "cross")? ("join" | ",") tableRep ("on" logic)?)*
tableRep            ->  ("(" select ")" | IDENTIFIER) IDENTIFIER?
whereSeg ↑          ->  "where" logic
groupBySeg          ->  "group" "by" columnList ("having" logic)?
orderBySeg          ->  "order" "by" orderItem ("," orderItem)*
limitSeg            ->  "limit" INTEGER ("offset" INTEGER)?
lockSeg             ->  sLock | xLock

orderItem           ->  binaryArithmetic ("desc" | "asc")?
sLock               ->  "lock" "in" "share" "mode"
xLock               ->  "for" "update"
logic ↑             ->  condition (("or" | "and") condition)*
condition ↑+        ->  inCondition | existsCondition | comparison
inCondition ↑+      ->  IDENTIFIER ("not")? "in" "(" select | (primary ("," primary)*) ")"
existsCondition     ->  ("not")? "exists" "(" select ")"
comparison ↑        ->  binaryArithmetic (comparisonSymbol binaryArithmetic)?
comparisonSymbol ↑	->  ">" | "<" | ">=" | "<=" | "!=" | "=" | "like" | "contains" | isNot
isNot ↑             ->  "is" ("not")?
binaryArithmetic ↑  ->  unaryArithmetic (("+" | "-" | "*" | "/") unaryArithmetic)*
unaryArithmetic ↑   ->  ("!"|"-") unaryArithmetic | primary
primary ↑+          ->  #{xxx} | ? | "true" | "false" | "null" | INTEGER | DECIMAL | STRING | IDENTIFIER | grouping | function | "(" select ")" | groupFunction | windowFunction
grouping ↑          ->  "(" logic ")"
function ↑          ->  functionName "(" functionParameter? ("," functionParameter)* ")"
functionParameter ↑ ->  condition | timeInterval | timeUnit | function
timeInterval ↑      ->  "interval" INTEGER IDENTIFIER
timeUnit ↑          ->  IDENTIFIER "from" primary
groupFunction       ->  groupConcat | (("avg" | "max" | "min" | "count" | "sum" | "flat") "(" binaryArithmetic ")" window?)
groupConcat         ->  "group_concat" "(" ("distinct")? binaryArithmetic ("," binaryArithmetic)* ("order" "by" orderItem ("," orderItem)*)? ("separator" primary)? ")"
columnList			->  IDENTIFIER ("," IDENTIFIER)*

windowFunction      ->  IDENTIFIER "(" binaryArithmetic? ")" window
window              ->  "over" "(" "partition" "by" binaryArithmetic ("," binaryArithmetic)* orderBySeg? dynamicFrame? ")"
dynamicFrame        ->  ("rows" | "range") (frameBetween | frameEdge)
frameBetween        ->  "between" frameEdge "and" frameEdge
frameEdge           ->  (INTEGER | "unbounded" | "current") ("preceding" | "following" | "row")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
InsertParser
insert              ->  "insert" (constrict)? "into" IDENTIFIER (((insertValuesRep | insertSetRep) onDuplicateKey?) | (insertSelectRep))
constrict           ->  ignore
insertValuesRep     ->  "(" columnList ")" "values" ("(" binaryArithmetic ("," binaryArithmetic)* ")") ("," "(" binaryArithmetic ("," binaryArithmetic)* ")")*
insertSetRep        ->  "set" assignmentList
insertSelectRep     ->  "(" columnList ")" select
binaryArithmetic ↑  ->  unaryArithmetic (("+" | "-" | "*" | "/") unaryArithmetic)*
unaryArithmetic ↑   ->  ("!"|"-") unaryArithmetic | primary
primary ↑           ->  #{xxx} | ? | "true" | "false" | "null" | INTEGER | DECIMAL | STRING | IDENTIFIER | grouping | function
function ↑          ->  functionName "(" binaryArithmetic? ("," binaryArithmetic)* ")"
onDuplicateKey      ->  "on" "duplicate" "key" "update" assignmentList
assignmentList ↑    ->  (IDENTIFIER "=" binaryArithmetic) ("," IDENTIFIER "=" binaryArithmetic)*
columnList ↑	    ->  IDENTIFIER ("," IDENTIFIER)*
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DeleteParser
delete              ->  "delete" "from" IDENTIFIER (whereSeg)?
logic ↑             ->  condition (("or" | "and") condition)*
condition ↑         ->  inCondition | comparison
inCondition ↑       ->  IDENTIFIER ("not")? "in" "(" (primary ("," primary)*) ")"
comparison ↑        ->  binaryArithmetic (comparisonSymbol binaryArithmetic)?
comparisonSymbol ↑	->  ">" | "<" | ">=" | "<=" | "!=" | "=" | "like" | "contains" | isNot
isNot ↑             ->  "is" ("not")?
binaryArithmetic ↑  ->  unaryArithmetic (("+" | "-" | "*" | "/") unaryArithmetic)*
unaryArithmetic ↑   ->  ("!"|"-") unaryArithmetic | primary
primary ↑           ->  #{xxx} | ? | "true" | "false" | "null" | INTEGER | DECIMAL | STRING | IDENTIFIER | grouping | function
grouping ↑          ->  "(" logic ")"

function ↑          ->  functionName "(" functionParameter? ("," functionParameter)* ")"
functionParameter ↑ ->  condition | timeInterval | timeUnit | function
timeInterval ↑      ->  "interval" INTEGER IDENTIFIER
timeUnit ↑          ->  IDENTIFIER "from" primary

whereSeg ↑          ->  "where" logic
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UpdateParser
update              ->  "update" IDENTIFIER "set" assignmentList (whereSeg)?
assignmentList ↑    ->  (IDENTIFIER "=" binaryArithmetic) ("," IDENTIFIER "=" binaryArithmetic)*
logic ↑             ->  condition (("or" | "and") condition)*
condition ↑         ->  inCondition | comparison
inCondition ↑       ->  IDENTIFIER ("not")? "in" "(" (primary ("," primary)*) ")"
comparison ↑        ->  binaryArithmetic (comparisonSymbol binaryArithmetic)?
comparisonSymbol ↑	->  ">" | "<" | ">=" | "<=" | "!=" | "=" | "like" | "contains" | isNot
isNot ↑             ->  "is" ("not")?
binaryArithmetic ↑  ->  unaryArithmetic (("+" | "-" | "*" | "/") unaryArithmetic)*
unaryArithmetic ↑   ->  ("!"|"-") unaryArithmetic | primary
primary ↑           ->  #{xxx} | ? | "true" | "false" | "null" | INTEGER | DECIMAL | STRING | IDENTIFIER | grouping | function
grouping ↑          ->  "(" logic ")"

function ↑          ->  functionName "(" functionParameter? ("," functionParameter)* ")"
functionParameter ↑ ->  condition | timeInterval | timeUnit | function
timeInterval ↑      ->  "interval" INTEGER IDENTIFIER
timeUnit ↑          ->  IDENTIFIER "from" primary

whereSeg ↑          ->  "where" logic
